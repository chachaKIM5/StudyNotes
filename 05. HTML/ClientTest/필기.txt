1. c:\class\client 폴더 생성
2. 이클립스 실행 > 위 워크스페이스 지정
3. 인코딩
 - Preferences - encoding 검색 > Workspace > Text file encoding > "UTF-8"
 - Preferences - encoding 검색 > Web> CSS Files, HTML, JSP > "ISO 10646/Unicode(UTF-8)"

4. Apache Tomcat 설치 및 설정
 - http://tomcat.apache.org
 - Download - Tomcat 8 - 64-bit Windows zip 다운로드
 - 압축 푼 후 폴더 통째로 C:\class로 이동 (무설치형)
 - 이클립스와 Apache Tomcat 연동
 - Preferences - server 검색 > Runtime Environments
 - Add > Apache Tomcat v8.5 선택 > Browse 버튼 눌러서 C:\class\apache-tomcat-8.5.78 > Finish

5. Apache Tomcat 인스턴스 생성
 - 보조창 > Servers > create new server... > next > finish

6. 새 프로젝트 생성
 - New - 웹 응용프로그램(Web Application) > Web > Dynamic Web Project > "ClientTest"




"JavaTest" == "콘솔 프로그램 1개"
"ClientTest" == "웹사이트 1개"

Hello World! 찍어보기

콘솔 응용프로그램의 자원
1. *.java
2. *.txt
3. ..

웹 응용프로그램의 자원
1. *.html
2. *.css
3. *.js
4. *.jsp
5. *.java
6. *.txt
..

src > main > WebApp > New > HTML File
***** 반드시 파일을 WebApp에 만들 것

Hello World 적고 실행해 보기
- 실행은 Ctrl + F11, oracle이 설치되어 있는 컴퓨터는 포트번호 충돌이 일어나기 때문에 포트번호를 바꿔준다
- Server 탭에서 Tomcat v8.5 Server Stop 후 더블클릭, HTTP/1.1 포트번호 8090으로 바꿔주고 저장 후 닫기
- Window - Web Browser - 반드시 Chrome으로!

개발 환경 & 실행 환경
 - 웹 서비스 구현
 - 제공하는 쪽: 웹 서버 > Apache Tomcat
 - 제공받는 쪽: 웹 클라이언트 > 브라우저(Chrome, Edge, IE, FireFox...)
 - 개발툴: 이클립스(IDE)
 
웹 클라이언트(브라우저) -> 웹 서버
 - URL 사용
 - http://www.naver.com
 - http://localhost:8090/ClientTest/Hello.html
 
 1. http://
 	- Hyper Text Transfer Protocol
 	- Scheme
 	- Protocol
 	- 서버와 클라이언트 간에 데이터를 주고받기 위한 약속	
 	- 무전기 > 대화 약속 > ~~~~ 오바. > 규칙!
 	
 2. naver.com
 	localhost
 	- Domain
 	- Server IP Address
 	- 서버측 호스트(컴퓨터)를 찾는 주소
 	
 3. :80
 	:8090
 	- 웹 서버 통신 포트 번호
 	- 웹 서비스를 하기 위한 포트 번호
 	- 80 > http:// 프로토콜을 위한 예약 포트 번호(전세계)
 	- 443 > https://
 	
 4. http://www.naver.com
 	http://localhost:8090
 	- 브라우저가 웹서버에 접속하기 위해 지정한 서버측 주소
 	- 위의 주소를 통해 상대방 컴퓨터를 찾을 수 있다.
 	- 왜 찾았나? 목적? > 상대방 컴퓨터의 저장장치에 들어있는 자원을 요청하기 위해서!
 	- 서버와 클라이언트 간의 최소한의 약속
 		> 위의 주소에 접속하면, 내(웹서버)가 내 저장장치에 있는
 		  '특정 폴더'를 열어줄테니 접속해서 보고 싶은 것 마음대로 가져가라~
 	    > 웹 서버 프로그램 사용해서 지정(Apache tomcat) > "webapp"
 	    
 	- 외부 > http://localhost:8090/ClientTest/Hello.htmll
 	- 내부 > webapp/hello.html
 	
 	- 내부 > webapp/sub/hi.html
 	- 외부 > http://localhost:8090/ClientTest/sub/hi.html
 	
 5. http://localhost:8090/ClientTest/Hello.html
 	- URL을 전부 소문자로 작성하고 싶은데 프로젝트명은 파스칼 표기법?
 	- ClientTest > Context Root Path
 	- Servers 탭에서 Tomcat v8.5 Stop하고 더블클릭
 	- Module 탭에서 Edit 누르고 /client 입력하기
 	  > 프로젝트명 ClientTest 대신 URL에는 client로 노출
 	  > 프로젝트명은 외부에 잘 노출시키지 않는다
 	- 아무것도 적지 않고 "/"만 적어두면? > 프로젝트명 생략
 	
 6. webapp > META-INF: 개발자 접근 X
 	webapp > WEB-INF: 개발자 접근 O(단, 서버 수업 때), 서버 환경 설정용, 외부에서 접근 절대 불가능
 	 - 예약된 폴더 > 당분간 사용 금지
 	 
 
 
웹수업
 - 클라이언트(브라우저가 실행): HTML, CSS, JavaScript
 - 서버(아파치 톰캣이 실행)	: Servlet, JSP, Spring
 
 
HTML
 - 웹 페이지 골격 작성
 - 웹 페이지 내용물 작성
 
CSS
 - 웹 페이지 서식 작성
 
JavaScript
 - 웹 페이지 기능 작성
 - 프로그래밍 구현
 
 
 
HTML, Hyper Text MarkUp Language
 - 하이퍼텍스트 마크업 언어
 - 프로그래밍 언어(X) > 프레젠테이션 언어(O): 무언가를 표현하는 기능을 가지는 언어
 - Hyper Text > 링크
 - MarkUp Language > 언어 표기법: <명령어>
 	- HTML, XHTML, XML, VoiceML, **ML
 - SGML > 메타 언어 > 다른 언어를 정의할 수 있는 기능을 가진 언어
 - 웹 서비스에서 제공하는 페이지를 작성하는 언어
 
 
HTML 주관 단체
 - W3C, World Wide Web Consortium
 - https://w3.org
 - HTML 1.0 ~ HTML 5
 - HTML 4.01, XHTML 1.0, HTML5
 
 - HTML 4.01 > 가장 대중화된 버전(웹 가장 활성화)
 - XHTML 1.0 = XML + HTML > 문법 강력하게 준수
 - HTML5 > 2014년
 
 - 브라우저 전쟁 > 1차 전쟁(Netscape vs IE) > 2차 전쟁
 - 브라우저 회사 > 기존 HTML + 자체 HTML 생산;;; + 기존 HTML 자체 처리 ;;;;;
 
 - 해당 페이지 오류!
 - A(Netscape), B(IE)
 
 - IE > 웹 기술 > 아주 많은 문제점 발생 > 표준 문법 위반 + 자체 문법 생산 > 웹사이트 2개 생성
 - 브라우저마다 약간의 실행 결과 차이가 있다
 	> 크롬(Chrome)
 	> 크로미움 프로젝트 > 크롬 기반 기술 오픈 소스 > MS 엣지, 웨일 등... 같은 결과
 	
 	
 
 HTML 개발 환경
  - 텍스트 편집기
  	1. 메모장
  	2. IDE > Eclipse, IntelliJ, Visual Studio 등..
  	3. Sublime Text, Atom, Brackets, Visual Studio Code(MS)..
  	
  - 실행 환경/도구
    1. 크롬
    2. 엣지
    3. 파이어폭스
    4. 사파리
    5. 모바일 버전
    
    
 
HTML 언어 구성 요소
 1. 태그(Tag), 엘리먼트(Element)
 2. 속성(Attribute)
 3. 텍스트(PCDATA)
 4. 엔티티(Entity)
 5. 주석(Comment)
 6. 선언문(Declaration)
 7. 외부 요소
 8. 등등...
 
 
HTML 문서 확장자
 - *.html
 - *.htm
 
 
webapp > html > "ex01.html"
		 css
		 javascript
		 
		 
html > "주소록.xml"

eXtensiable Markup Language
확장가능한 마크업 언어 > 구조를 마음대로 정의할 수 있다

XML > 데이터 스키마 정의 + 데이터 저장 > 파일
	오라클 (컬럼정의+테이블) + INSERT
		 