
MyBatis
- =iBatis
- JDBC 역할 > 응용 프로그램과 데이터베이스를 연결시켜주는 중간 계층

- MyBatis 사용 위한 pom.xml dependency 추가 (=.jar 파일 설치)
	- 위 4개는 필수!

	  <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
      <dependency>
          <groupId>org.mybatis</groupId>
          <artifactId>mybatis</artifactId>
          <version>3.5.10</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
      <dependency>
          <groupId>org.mybatis</groupId>
          <artifactId>mybatis-spring</artifactId>
          <version>2.0.7</version>
      </dependency>
            
      <!-- https://mvnrepository.com/artifact/org.springframework/spring-orm -->
      <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-orm</artifactId>
          <version>4.3.8.RELEASE</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
      <dependency>
          <groupId>commons-dbcp</groupId>
          <artifactId>commons-dbcp</artifactId>
          <version>1.4</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/org.lazyluke/log4jdbc-remix -->
      <dependency>
          <groupId>org.lazyluke</groupId>
          <artifactId>log4jdbc-remix</artifactId>
          <version>0.2.7</version>
      </dependency>
      
      <!-- Lombok -->
      <dependency>
         <groupId>org.projectlombok</groupId>
         <artifactId>lombok</artifactId>
         <version>1.18.8</version>
         <scope>provided</scope>
      </dependency>


1. pom.xml
	- 스프링 버전, 자바 버전 수정
	
2. 파일 생성하기
	- com.test.spring > "MyBatisController.java"
					  > "MyBatisService.java" (I)
					  > "MyBatisServiceImpl.java"
					  > "MyBatisDAO.java" (I)
					  > "MyBatisDAOImpl.java"
					  > "MyBatisDTO.java"
	- views > "result.jsp"
	- WEB-INF > "mybatis.xml"
	
3. "script.sql"
	- "tblMyBatis"

4. WEB-INF > spring > root-context.xml
	- 프로젝트 전반에 걸친 환경 설정하는 파일
	- DB 설정
   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
      <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
      <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
      <property name="username" value="hr"></property>
      <property name="password" value="java1234"></property>
   </bean>
   
   <bean id="sessionfactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dataSource"></property> <!-- 객체 의존 주입 -->
      <property name="mapperLocations" value="classpath*:com/test/spring/mapper/*.xml"></property>
      <property name="configLocation" value="/WEB-INF/mybatis.xml"></property>
   </bean>
	
   <bean class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg ref="sessionfactory"></constructor-arg>
   </bean>
   
   
   
+++++ com.test.spring.mapper > "test.xml"
	

	
bean 태그를 만들어 Spring이 인식할 수 있도록 함 -> 대신 어노테이션 사용
@Component
	- =@Controller
	- =@Service
	- =@Repository
	
	
Ojdbc는 Maven Repository에서 제공 X -> 직접 파일 설치 (WEB-INF > "lib")

- root-context.xml에 log4j 추가, factorybean의 datasource를 log4j로 수정
- src/main/resources > log4j 파일 수정



***** sql문 적을 때 주의점
	- #{parameter} -> 'parameter'로 인식
	- ${parameter} -> parameter로 인식
	- ${} 바인딩은 테이블명 같은 식별자를 입력할 때 사용할 수 있다\
	

mapper에서 사용할 클래스의 alias 정하기
- mybatis.xml에서 configuration에 해당 클래스와 alias 추가
-  <typeAliases>
   		<typeAlias type="com.test.spring.MyBatisDTO" alias="dto" />
   </typeAliases> 
