package com.test.java;

public class Ex00_필기 {

	public static void main(String[] args) {
		
		//Ex00_필기.java
		
				
		/*
				
		 
		1. 메모장
			- 코드 작성
			- 산출물 > "Hello.java" > Source Code File
			- 소스 파일은 프로그램이 아니다. > 텍스트 파일이다.
			- 프로그래밍 코드를 작성 > 프로그램 완성 > CPU에게 명령어를 전달
			- 이 코드가 어떤 언어로 구성되어 있나? > 자바(X) 인간이 쓰는 언어(O)
			- 소스 파일의 명령어의 실행 주체 > 컴퓨터(CPU) > 컴퓨터는 이진데이터만 인식 가능(1, 0)
			
		2. javac.exe Hello.java
			- 1차 컴파일 = javac.exe 파일명
			- Javac.exe > Java Compiler > 사람이 작성한 코드를 컴퓨터가 이해하는 코드로 번역하는 프로그램
			- 번역 작업 실행 > Compile
			- 산출물 > "Hello.class" > 실행 파일(클래스 파일)
			- Hello.class > 컴퓨터 실행(바이너리(2진법) 코드=이진 데이터=기계어=Machine Code)
			- 중간언어(IL) 산출물 > 실행파일(=프로그램)
			
		3. java.exe Hello
			- 2차 컴파일=인터프리터=JIT(Just in time) 컴파일
			   = java.exe 클래스명=1차 산출물의 확장자를 뗀 파일 이름
			- 자바는 컴파일을 2번
			- java.exe > Java Compiler, Java Interpretor
			- java.exe 클래스명 > 최종 실행
			- 최종적으로 운영체제에 적합한 기계어로 바꿔주는 번역 작업

			
		** 소스 -> 번역 -> 기계어 프로그래밍 언어들은 a방식 혹은 b방식을 사용함
		a. 컴파일 > 컴파일러: 자바, SQL
		 - 영어권 친구에게 주려고 한글로 된 책을 영어로 번역?
		 - 번역가에게 책을 줘서 한 달 동안 기다리고 번역본 책을 받음
		 - 번역본을 친구에게 전달, 친구는 언제든 번역본을 꺼내 읽을 수 있음
		 - 무조건 '산출물'(=번역본)이 발생
		 - 초기 실행 비쌈 + 반복 실행 쌈
		 - 프로그램 입장에서 번역 비용 "1회", 속도 빠름
		  
		 - 장점: 번역을 한 번만 해도 읽고 싶을 때 마음대로 읽을 수 있음
		 - 단점: 시간 소요
		 
		b. 인터프리트 > 인터프리터: SQL, HTML, CSS, JavaScript
		 - 통역가를 데려와서 친구 옆에 붙여놓고 친구가 책을 읽을 때마다 친구에게 번역해 줌
		 - 초기 실행 중간급 + 반복 실행 중간급
		 - 산출물 X
		 
		 - 장점: 시간 소요 X
		 - 단점: 읽고 싶을 때마다 번역해야 함
		 
		 */
		 
		
	}
}
